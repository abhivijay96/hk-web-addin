var express = require('express');
var app = express();

app.set('port', (process.env.PORT || 5000));

var reply = '<!DOCTYPE html> <html> <head> <meta charset="UTF-8" /> <meta http-equiv="X-UA-Compatible" content="IE=Edge" /> <title></title> <script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.12.4.min.js"></script> <!-- For the JavaScript APIs for Office, go to http://aka.ms/officejs-overview to learn more. --> <script src="https://appsforoffice.microsoft.com/lib/1/hosted/office.js" type="text/javascript"></script> <!-- To enable offline debugging using a local reference to Office.js, use: --> <!-- <script src="Scripts/Office/MicrosoftAjax.js" type="text/javascript"></script> --> <!-- <script src="Scripts/Office/1/office.js" type="text/javascript"></script> --> <script type="text/javascript"> // Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE in the project root for license information. /** * MessageBanner component * * A component to display error messages * */ /** * @namespace fabric */ var fabric = fabric || {}; /** * * @param {HTMLElement} container - the target container for an instance of MessageBanner * @constructor */ fabric.MessageBanner = function (container) { this.container = container; this.init(); }; fabric.MessageBanner.prototype = (function () { var _clipper; var _bufferSize; var _textContainerMaxWidth = 700; var _clientWidth; var _textWidth; var _initTextWidth; var _chevronButton; var _errorBanner; var _actionButton; var _closeButton; var _bufferElementsWidth = 88; var _bufferElementsWidthSmall = 35; var SMALL_BREAK_POINT = 480; /** * sets styles on resize */ var _onResize = function () { _clientWidth = _errorBanner.offsetWidth; if (window.innerWidth >= SMALL_BREAK_POINT) { _resizeRegular(); } else { _resizeSmall(); } }; /** * resize above 480 pixel breakpoint */ var _resizeRegular = function () { if ((_clientWidth - _bufferSize) > _initTextWidth && _initTextWidth < _textContainerMaxWidth) { _textWidth = "auto"; _chevronButton.className = "ms-MessageBanner-expand"; _collapse(); } else { _textWidth = Math.min((_clientWidth - _bufferSize), _textContainerMaxWidth) + "px"; if (_chevronButton.className.indexOf("is-visible") === -1) { _chevronButton.className += " is-visible"; } } _clipper.style.width = _textWidth; }; /** * resize below 480 pixel breakpoint */ var _resizeSmall = function () { if (_clientWidth - (_bufferElementsWidthSmall + _closeButton.offsetWidth) > _initTextWidth) { _textWidth = "auto"; _collapse(); } else { _textWidth = (_clientWidth - (_bufferElementsWidthSmall + _closeButton.offsetWidth)) + "px"; } _clipper.style.width = _textWidth; }; /** * caches elements and values of the component */ var _cacheDOM = function (context) { _errorBanner = context.container; _clipper = context.container.querySelector(".ms-MessageBanner-clipper"); _chevronButton = context.container.querySelector(".ms-MessageBanner-expand"); _actionButton = context.container.querySelector(".ms-MessageBanner-action"); _bufferSize = _actionButton.offsetWidth + _bufferElementsWidth; _closeButton = context.container.querySelector(".ms-MessageBanner-close"); }; /** * expands component to show full error message */ var _expand = function () { var icon = _chevronButton.querySelector(".ms-Icon"); _errorBanner.className += " is-expanded"; icon.className = "ms-Icon ms-Icon--chevronsUp"; }; /** * collapses component to only show truncated message */ var _collapse = function () { var icon = _chevronButton.querySelector(".ms-Icon"); _errorBanner.className = "ms-MessageBanner"; icon.className = "ms-Icon ms-Icon--chevronsDown"; }; var _toggleExpansion = function () { if (_errorBanner.className.indexOf("is-expanded") > -1) { _collapse(); } else { _expand(); } }; /** * hides banner when close button is clicked */ var _hideBanner = function () { if (_errorBanner.className.indexOf("hide") === -1) { _errorBanner.className += " hide"; setTimeout(function () { _errorBanner.className = "ms-MessageBanner is-hidden"; }, 500); } }; /** * shows banner if the banner is hidden */ var _showBanner = function () { _errorBanner.className = "ms-MessageBanner"; }; /** * sets handlers for resize and button click events */ var _setListeners = function () { window.addEventListener("resize", _onResize, false); _chevronButton.addEventListener("click", _toggleExpansion, false); _closeButton.addEventListener("click", _hideBanner, false); }; /** * initializes component */ var init = function () { _cacheDOM(this); _setListeners(); _clientWidth = _errorBanner.offsetWidth; _initTextWidth = _clipper.offsetWidth; _onResize(null); }; return { init: init, showBanner: _showBanner, hideBanner: _hideBanner, toggleExpansion: _toggleExpansion }; }()); </script> <script type="text/javascript"> (function () { "use strict"; var messageBanner; // The Office initialize function must be run each time a new page is loaded. Office.initialize = function (reason) { $(document).ready(function () { var element = document.querySelector(".ms-MessageBanner"); messageBanner = new fabric.MessageBanner(element); messageBanner.hideBanner(); loadProps(); }); }; // Load properties from the Item base object, then load the // message-specific properties. function loadProps() { var item = Office.context.mailbox.item; var address = Office.context.mailbox.userProfile.emailAddress; $("#intern").click(handleIntern); $("#recruit").click(handleRecruit); function handleIntern() { if(localStorage["intern"] == null) { fetchTemp(1); } else { send(localStorage["intern"]); } } function handleRecruit() { if(localStorage["recruit"] == null) { fetchTemp(2); } else { send(localStorage["recruit"]); } } } function fetchTemp(flag) { function reqListener() { if (flag == 1) localStorage["intern"] = this.responseText; else localStorage["recruit"] = this.responseText; send(this.responseText); } var oReq = new XMLHttpRequest(); oReq.addEventListener("load", reqListener); oReq.open("GET", "https://raw.githubusercontent.com/higherknowledge/outlook-integration/master/templates/" + Office.context.mailbox.userProfile.emailAddress + (flag == 1 ? "" : "R")); oReq.send(); } function send(template) { var response = JSON.parse(template); var body = getBody(response["Body"]); Office.context.mailbox.item.displayReplyForm(body); localStorage.clear(); } function getBody(body) { var res = ""; body.forEach(function (entry) { res += entry + "<br/><br/>"; }) return res; } // Helper function for displaying notifications function showNotification(header, content) { $("#notificationHeader").text(header); $("#notificationBody").text(content); messageBanner.showBanner(); messageBanner.toggleExpansion(); } })(); </script> <!-- For the Office UI Fabric, go to http://aka.ms/office-ui-fabric to learn more. --> <link rel="stylesheet" href="https://appsforoffice.microsoft.com/fabric/2.1.0/fabric.min.css" /> <link rel="stylesheet" href="https://appsforoffice.microsoft.com/fabric/2.1.0/fabric.components.min.css" /> <!-- To enable the offline use of Office UI Fabric, use: --> <!-- link rel="stylesheet" href="Content/fabric.min.css" --> <!-- link rel="stylesheet" href="Content/fabric.components.min.css" --> </head> <body> <div id="content-header"> <div class="padding"> <p class="ms-font-xl ms-fontColor-themeDarkAlt ms-fontWeight-semilight">HK reply</p> </div> </div> <div id="content-main" class="ms-Grid"> <div class="ms-Grid-row"> <div class="ms-Grid-col ms-u-sm5"> <button class="ms-Button" id="intern"> <span class="ms-Button-label">Reply with HK intern</span> </button> </div> <div class="ms-Grid-col ms-u-sm5"> <button class="ms-Button" id="recruit"> <span class="ms-Button-label">Reply HK recruit</span> </button> </div> </div> </div> <!-- FabricUI component used for displaying notifications --> <div class="ms-MessageBanner" style="position:absolute;bottom: 0;"> <div class="ms-MessageBanner-content"> <div class="ms-MessageBanner-text"> <div class="ms-MessageBanner-clipper"> <div class="ms-font-m-plus ms-fontWeight-semibold" id="notificationHeader"></div> <div class="ms-font-m ms-fontWeight-semilight" id="notificationBody"></div> </div> </div> <button class="ms-MessageBanner-expand" style="display:none"><i class="ms-Icon ms-Icon--chevronsDown"></i> </button> <div class="ms-MessageBanner-action"></div> </div> <button class="ms-MessageBanner-close"> <i class="ms-Icon ms-Icon--x"></i> </button> </div> </body> </html>'

app.get('/', function(request, response) {
  response.send(reply);
});

app.listen(app.get('port'), function() {
  console.log('Node app is running on port', app.get('port'));
});
